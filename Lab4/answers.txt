
#########################################################################################
[LABORATION] Path finder
##
## Important note: This is a machine-readable config file that will be read using 
## the Python 'configparser' library: https://docs.python.org/3/library/configparser.html
##
## Please follow these rules when editing this file:
##  1. Only write your answer where there is a [...] stub.
##  2. Multiline answers must be indented.
##  3. Don't change anything else.
#########################################################################################

# Which programming language did you implement in? 
# (Write only Java, Python, or PyPy)

Language: [Java]


# Who are you?

Group members: 
    [Isac Snecker]
    [Reza Amani]
    [Jonatan Cederberg]


#########################################################################################
[PART 1] Simple UCS
#########################################################################################

# List the number of loop iterations, minimal cost, and a shortest path 
# (i.e. a path having minimal cost) when running UCS on the following problems:

# ... the shortest path from Lund to Kiruna in the graph `AdjacencyGraph/citygraph-SE.txt`

Q1a:
    Loop iterations: [2719]
    Cost of path:    [1826]
    Number of edges: [31]
    Solution path:   [Lund --[16]--> Löddeköpinge --[69]--> Hjärnarp --[52]--> Åled --[6]--> Oskarström --[22]--> ... --[68]--> Storuman --[71]--> Sorsele --[233]--> Jokkmokk --[93]--> Gällivare --[121]--> Kiruna]

# ... the n-puzzle solution from `/HFG/BED/C_A/` to `/ABC/DEF/GH_/`

Q1b:
    Loop iterations: [103101]
    Cost of path:    [22]
    Number of edges: [22]
    Solution path:   [/_AB/CDE/FGH/ --> /CAB/_DE/FGH/ --> /CAB/D_E/FGH/ --> /CAB/DE_/FGH/ --> /CA_/DEB/FGH/ --> ... --> /AB_/DFC/GEH/ --> /ABC/DF_/GEH/ --> /ABC/D_F/GEH/ --> /ABC/DEF/G_H/ --> /ABC/DEF/GH_/]

# ... the shortest path from 23:161 to 130:211 in the graph `GridGraph/AR0011SR.txt`

Q1c:
    Loop iterations: [13248]
    Cost of path:    [1216,48]
    Number of edges: [1016]
    Solution path:   [1:1 --[1]--> 1:2 --[1]--> 1:3 --[1]--> 1:4 --[1,41]--> 2:5 --[1,41]--> ... --[1]--> 196:97 --[1]--> 197:97 --[1]--> 198:97 --[1,41]--> 199:98 --[1]--> 199:99]


#########################################################################################
[PART 2] Word ladder
#########################################################################################

# List the number of loop iterations, minimal cost, and a shortest path 
# (i.e. a path having minimal cost) when running UCS on the following problem:

# ... the shortest word ladder from "syster" to "broder" using the dictionary `WordLadder/swedish-saldo.txt`

Q2a:
    Loop iterations: [36865]
    Cost of path:    [11]
    Number of edges: [11]
    Solution path:   [syster --> byster --> bysten --> basten --> basken --> ... --> bauden --> bruden --> bräden --> bräder --> broder]


#########################################################################################
[PART 3] A*
#########################################################################################

# List the number of loop iterations and the minimal cost when running A* on the following problems:

# ... the n-puzzle solution from `/HFG/BED/C_A/` to `/ABC/DEF/GH_/`

Q3a:
    Loop iterations: [8369]
    Cost of path:    [31]

# ... the n-puzzle solution from `/HGF/BED/C_A/` to `/ABC/DEF/GH_/`

Q3b:
    Loop iterations: [241921]
    Cost of path:    [No path found]


#########################################################################################
[PART 4] Guessing the cost
#########################################################################################

# List the number of loop iterations and the minimal cost when running A* on the following problems:

# ... the shortest path from 23:161 to 130:211 in the graph `GridGraph/AR0011SR.txt`

Q4a:
    Loop iterations: [47900]
    Cost of path:    [366,40]

# ... the shortest word ladder from "syster" to "broder" using the dictionary `WordLadder/swedish-saldo.txt`.

Q4b:
    Loop iterations: [5230]
    Cost of path:    [11,0]


#########################################################################################
[PART 5] Reflections
#########################################################################################

# For each of the three classes GridGraph, WordLadder, and NPuzzle,
# what is the approximate improvement factor in the number of loop iterations 
# by running A* instead of UCS? Try a number of different examples per class.

Q5a:
    GridGraph:  [2.4]
    WordLadder: [7]
    NPuzzle:    [73]


# For which of the three classes GridGraph, WordLadder, and NPuzzle, did the 
# heuristic guessCost have the most impact? What do you think is the reason for this?

Q5b:
    [NPuzzle, The reason is because there are very many outgoing edges from this type of graph as the available edges are factorial
    by using Astar we don't need to iterate through all of these different states.]


# What are the main differences between your implementations of `searchAstar` and `searchUCS`?

Q5c:
    [SearchUCS priorities new edges to explore by the cost of each of the available edges,
    searchAstar uses some form of guessing to also take into account the expected cost of reaching the goal node through each next available node,
    as well as the total cost from start to the "next" node.]


# What's the asymptotic worst-case complexity of `WordLadder.outgoingEdges`
# in the alphabet size K and the length N of the given word? Justify your answer.
# (You can assume that searching in sets and dictionaries are constant time, O(1))

Q5d:
    [O(N^2 * K), The function contains two nested loop, one which will run N times and one which will run K times. Inside these nested loops
    w.toCharArray() and this.dictionary.contains(newWord) both have a worst time complexity of O(n) meaning the body of the nested loops have
    O(2N) = O(N) complexity. In total this will give the method a O(N * K * N) = O(N^2 * K) complexity.]


#########################################################################################
[APPENDIX] General information
#########################################################################################

# Approximately how many hours did you spend on the assignment, per group member?

Hours:
    [10]


# Are there any known bugs or limitations?

Bugs:
    [...]

Limitations:
    [...]


# Did you collaborate with any other students on this lab?
# 
#   If so, please write in what way you collaborated and with whom.
#   Also include any resources (including the web) that you may
#   have used in creating your design.

Collaborations: 
    [...]


# Describe any serious problems you encountered.

Problems: 
    [...]


# List any other comments here.
#
#   Feel free to provide any feedback on how much you learned
#   from doing the assignment, and whether you enjoyed it.

Comments: 
    [...]


